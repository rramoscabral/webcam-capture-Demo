/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Demos;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author rramoscabral
 */
public class ImageCapture extends javax.swing.JFrame {

    private static final long serialVersionUID = -8595190672658850926L;
    private final Dimension ds = new Dimension(277, 231);
    private Dimension cs = null;
    private WebcamPanel webCamPanel;
    private Webcam webCam;
    private Thread thread = null;

    /**
     *
     * @throws Exception
     */
    public ImageCapture() throws Exception {
        initComponents();
        java.util.List<Webcam> xt = Webcam.getWebcams();
        jCBResolutions.setModel(new DefaultComboBoxModel<>(Resolution.values()));
        jCBWebCams.removeAllItems();
        if (xt.isEmpty()) {
            jCBWebCams.addItem("No devices found");
        } else {
            xt.stream().forEach((deviceListVector1) -> {
                jCBWebCams.addItem(deviceListVector1.getName());
            });
        }
        jCBResolutions.setSelectedIndex(4);
        //restart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPWebCam = new javax.swing.JPanel();
        jPImageCapture = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCBWebCams = new javax.swing.JComboBox();
        jCBResolutions = new javax.swing.JComboBox();
        jLResolutionDetail = new javax.swing.JLabel();
        jBStart = new javax.swing.JButton();
        jBcaptureImage = new javax.swing.JButton();
        jBRestart = new javax.swing.JButton();
        jBStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Webcam Capture API (webcam-capture.sarxos.pl) Image capture demo");
        setResizable(false);

        jPWebCam.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPWebCamLayout = new javax.swing.GroupLayout(jPWebCam);
        jPWebCam.setLayout(jPWebCamLayout);
        jPWebCamLayout.setHorizontalGroup(
            jPWebCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 275, Short.MAX_VALUE)
        );
        jPWebCamLayout.setVerticalGroup(
            jPWebCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 229, Short.MAX_VALUE)
        );

        jPImageCapture.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPImageCaptureLayout = new javax.swing.GroupLayout(jPImageCapture);
        jPImageCapture.setLayout(jPImageCaptureLayout);
        jPImageCaptureLayout.setHorizontalGroup(
            jPImageCaptureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPImageCaptureLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPImageCaptureLayout.setVerticalGroup(
            jPImageCaptureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPImageCaptureLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jCBWebCams.setMaximumRowCount(5);
        jCBWebCams.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No devices found" }));
        jCBWebCams.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBWebCamsItemStateChanged(evt);
            }
        });

        jCBResolutions.setMaximumRowCount(5);
        jCBResolutions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "no information" }));
        jCBResolutions.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBResolutionsItemStateChanged(evt);
            }
        });

        jLResolutionDetail.setText("Resolution info");

        jBStart.setText("Start");
        jBStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStartActionPerformed(evt);
            }
        });

        jBcaptureImage.setText("Capture");
        jBcaptureImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBcaptureImageActionPerformed(evt);
            }
        });

        jBRestart.setText("Change webcam/resolution");
        jBRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRestartActionPerformed(evt);
            }
        });

        jBStop.setText("Stop");
        jBStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCBWebCams, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCBResolutions, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLResolutionDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPWebCam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPImageCapture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBStop)
                        .addGap(8, 8, 8)
                        .addComponent(jBcaptureImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBRestart)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPWebCam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPImageCapture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBWebCams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBResolutions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLResolutionDetail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBcaptureImage)
                    .addComponent(jBStart)
                    .addComponent(jBRestart)
                    .addComponent(jBStop))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStartActionPerformed
        if (thread != null) {
            if (thread.isDaemon()) {
                stop();
            }
        }
        thread = new Thread() {
            @Override
            public void run() {
                webCamPanel.start();
            }
        };
        thread.setDaemon(true);
        thread.start();
        jBStart.setEnabled(false);
        buttonsStatus(true);
    }//GEN-LAST:event_jBStartActionPerformed

    private void jBcaptureImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBcaptureImageActionPerformed
        BufferedImage bi = webCam.getImage();
        Image newimg = bi.getScaledInstance(271, 201, java.awt.Image.SCALE_SMOOTH);
        ImageIcon imageIcon = new ImageIcon(newimg);
        jLabel1.setIcon(imageIcon);

    }//GEN-LAST:event_jBcaptureImageActionPerformed

    private void jBRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRestartActionPerformed
        if (webCam.isOpen()) {
            disposeWebCam();
        }
        jCBResolutions.setSelectedIndex(4);
        comboBoxStatus(true);
    }//GEN-LAST:event_jBRestartActionPerformed

    private void jBStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStopActionPerformed
        disposeWebCam();
        buttonsStatus(false);
        comboBoxStatus(true);
    }//GEN-LAST:event_jBStopActionPerformed

    private void jCBResolutionsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBResolutionsItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCBResolutions.getItemCount() != 0) {
                if (jCBResolutions.getSelectedIndex() != -1) {
                    if (!jCBResolutions.getSelectedItem().toString().equals("No devices found")) {
                        webCamSelected();
                        comboBoxStatus(false);
                    }
                }
            }
        }
    }//GEN-LAST:event_jCBResolutionsItemStateChanged

    private void jCBWebCamsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBWebCamsItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCBWebCams.getItemCount() != 0) {
                if (jCBWebCams.getSelectedIndex() != -1) {
                    if (!jCBWebCams.getSelectedItem().toString().equals("no information")) {
                        webCamSelected();
                    }
                }
            }
        }
    }//GEN-LAST:event_jCBWebCamsItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ImageCapture().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(ImageCapture.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBRestart;
    private javax.swing.JButton jBStart;
    private javax.swing.JButton jBStop;
    private javax.swing.JButton jBcaptureImage;
    private javax.swing.JComboBox jCBResolutions;
    private javax.swing.JComboBox jCBWebCams;
    private javax.swing.JLabel jLResolutionDetail;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPImageCapture;
    private javax.swing.JPanel jPWebCam;
    // End of variables declaration//GEN-END:variables

    /**
     * webCamSelected
     */
    private void webCamSelected() {
        try {
            if (webCam != null) {
                disposeWebCam();
            }
            Webcam webcam = Webcam.getWebcamByName(jCBWebCams.getSelectedItem().toString());
            if (webcam == null) {
                JOptionPane.showMessageDialog(null, "Webcam has not been found.", "Webcam not found", JOptionPane.ERROR_MESSAGE);
            } else {
                webCam = Webcam.getWebcamByName(jCBWebCams.getSelectedItem().toString());
                webCamPanel = new WebcamPanel(webCam, ds, false);
                cs = WebcamResolution.valueOf(jCBResolutions.getSelectedItem().toString()).getSize();
                String dimension = cs.getWidth() + " x " + cs.getHeight();
                jLResolutionDetail.setText(dimension);
                webCam.setViewSize(cs);
                webCamPanel.setFillArea(true);
                jPWebCam.setLayout(new FlowLayout());
                jPWebCam.removeAll();
                jPWebCam.add(webCamPanel);
            }
            jPWebCam.revalidate();
            buttonsStatus(false);
            comboBoxStatus(false);
        } catch (Exception wbex) {
            if (wbex.toString().contains("Incorrect dimension")) {
                JOptionPane.showMessageDialog(null, "The selected resolution is not supported by webcam.", "Selected resolution", JOptionPane.ERROR_MESSAGE);
                disposeWebCam();
                buttonsStatus(false);
                jBStart.setEnabled(false);
            }
        }
    }

    /**
     * Enum Resolutions
     */
    private enum Resolution {

        QQVGA, QVGA, CIF, HVGA, VGA, PAL, SVGA, XGA, HD720, WXGA, SXGA, UXGA, QXGA, WQHD, WQXGA
    }

    /**
     * Stop thread
     */
    private void stop() {
        thread.interrupt();
    }

    /**
     * Close WebCam
     */
    private void disposeWebCam() {
        webCam.close();
        comboBoxStatus(true);
        jBStart.setEnabled(true);
    }

    /**
     * Buttons enable/disable
     *
     * @param xt Boolean
     */
    private void buttonsStatus(Boolean xt) {
        jBStop.setEnabled(xt);
        jBcaptureImage.setEnabled(xt);
    }

    /**
     * *
     * ComboBox enable/disable
     *
     * @param xt Boolean
     */
    private void comboBoxStatus(boolean xt) {
        jCBWebCams.setEnabled(xt);
        jCBResolutions.setEnabled(xt);
    }

    private void restart() {
        if (webCam.isOpen()) {
            disposeWebCam();
        }
        comboBoxStatus(true);
        buttonsStatus(false);
        webCamSelected();
    }
}
